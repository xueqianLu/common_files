"Bundle
set nocompatible
syntax enable

filetype on
filetype off " Required

set rtp+=$HOME/.vim/bundle/vundle/
call vundle#rc()

" Use pathogen
"source ~/.vim/bundle/vim-pathogen/autoload/pathogen.vim
"call pathogen#runtime_append_all_bundles()

Bundle 'gmarik/vundle'
Bundle 'a.vim'
Bundle 'plasticboy/vim-markdown'
Bundle 'vim-autocomplete'
Bundle 'tagbar'
Bundle 'vim-powerline'
Bundle 'Colour-Sampler-Pack'
Bundle 'DoxygenToolkit'
Bundle 'nerdtree'
Bundle 'QFixToggle'
Bundle 'vim-headerGatesAdd'
Bundle 'OmniCppComplete'
Bundle 'snipmate'
Bundle 'vim-mru'
Bundle 'vim-go'
"Install syntastic
Bundle 'syntastic'

" Poweline
set laststatus=2
filetype on
let g:Powerline_symbols = 'unicode'
set t_Co=256
let g:Powerline_colorscheme = 'solarized256'
let g:solarized_termcolors=256
let g:Powerline_theme = 'default'
let g:Powerline_mode_n = 'NORMAL'

" HeaderGatesAdd
let g:DoxygenToolkit_authorName="luxueqian"
let g:DoxygenToolkit_versionString="0.1.00"
let g:DoxygenToolkit_briefTag_funcName="yes"
autocmd BufNewFile *.{py,x,h,hpp,c,cc,pc,sqc,cpp} DoxAuthor
" AUTO COMMANDS: {{{1
" auto expand tab to blanks
"autocmd FileType c,cpp set expandtab
" Restore the last quit position when open file.
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     exe "normal g'\"" |
    \ endif

function! AutoUpdateTheLastUpdateInfo()
        let s:original_pos = getpos(".")
        let s:regexp = "^\\s*\\([#\\\"\\*]\\|\\/\\/\\)\\s\\?[lL]ast \\([uU]pdate\\|[cC]hange\\):"
        let s:lu = search(s:regexp)
        if s:lu != 0
                let s:update_str = matchstr(getline(s:lu), s:regexp)
                call setline(s:lu, s:update_str . strftime("%Y-%m-%d %H:%M:%S", localtime()))
                call setpos(".", s:original_pos)
        endif
endfunction
autocmd BufWritePost *.{py,h,hpp,c,pc,sqc,cpp,cc} call AutoUpdateTheLastUpdateInfo()
autocmd BufNewFile *.{py,h,hpp,c,pc,sqc,cpp,cc} exec 'call append(0, "\/\/ Last Update:" . strftime("%Y-%m-%d %H:%M:%S", localtime()))'

" Color scheme
"colorscheme molokai
set background=dark
"colorscheme solarized
let g:solarized_termcolors=256
filetype plugin indent on

" Key Maps
set   autoindent
set   autoread
set   autowrite
set number
set smartindent
set cin
set ignorecase
" Userdefined indent style
set tabstop=4
set shiftwidth=4
set expandtab  "Uncomment when coding with Python
set list
set listchars=tab:\|\ ,nbsp:%,trail:-
set fileencodings=utf-8,gbk,ucs-bom,cp936,gb2312,gb18030
set incsearch
set cursorline
set hlsearch
set   ignorecase
set   incsearch
set   showcmd
"highlight CursorLine cterm=NONE ctermbg=grey ctermfg=NONE guibg=NONE guifg=NONE
"set backup
"set bdir=~/.file_backup

" Set mapleader
let mapleader=";"
" Switching between buffers.
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
inoremap <C-h> <Esc><C-W>h
inoremap <C-j> <Esc><C-W>j
inoremap <C-k> <Esc><C-W>k
inoremap <C-l> <Esc><C-W>l
" PLUGIN SETTINGS: {{{1
" taglist.vim
let g:Tlist_Auto_Update=1
let g:Tlist_Process_File_Always=1
let g:Tlist_Exit_OnlyWindow=1
let g:Tlist_Show_One_File=1
let g:Tlist_WinWidth=25
let g:Tlist_Enable_Fold_Column=0
let g:Tlist_Auto_Highlight_Tag=1
" NERDTree.vim
let g:NERDTreeWinPos="right"
let g:NERDTreeWinSize=25
let g:NERDTreeShowLineNumbers=1
let g:NERDTreeQuitOnOpen=1
" OmniCppComplete.vim
let g:OmniCpp_DefaultNamespaces=["std"]
let g:OmniCpp_MayCompleteScope=1
let g:OmniCpp_SelectFirstItem=2
" VimGDB.vim
if has("gdb")
	set asm=0
	let g:vimgdb_debug_file=""
	run macros/gdb_mappings.vim
endif
" snipMate
let g:snips_author="Lu Xueqian"
let g:snips_email="xueqian1991@163.com"
let g:snips_copyright="No1, Inc"
" plugin shortcuts
function! RunShell(Msg, Shell)
	echo a:Msg . '...'
	call system(a:Shell)
	echon 'done'
endfunction
" function auto load tags and cscope from up dir.
function! AutoLoadCTagsAndCScope()
	let max=5
	let dir='./'
	let i=0
	let break=0
	while isdirectory(dir) && i < max
		if filereadable(dir . 'cscope.out')
			execute 'cs add ' . dir . 'cscope.out'
			echo 'find cscope from ' . dir
			let break=1
		endif
		if filereadable(dir . 'tags')
			execute 'set tags=' . dir . 'tags'
			echo 'find tags from ' . dir
			let break = 1
		endif
		if break == 1
			execute 'lcd ' . dir
			break
		endif
		let dir = dir . '../'
		let i = i + 1
	endwhile
	if i == max
		echo 'not find any tags and cacope.'
	endif
endfunction
nmap <F7> :call AutoLoadCTagsAndCScope()<CR>

nmap  <F2> :TlistToggle<cr>
nmap  <F3> :NERDTreeToggle<cr>
nmap  <F4> :MRU<cr>
nmap  <F5> <Plug>LookupFile<cr>
nmap  <F6> :vimgrep /<C-R>=expand("<cword>")<cr>/ **/*.c **/*.h<cr><C-o>:cw<cr>
nmap  <F9> :call RunShell("Generate tags", "ctags -R --c++-kinds=+p --fields=+iaS --extra=+qf .")<cr>
nmap <F10> :call HLUDSync()<cr>
nmap <F11> :call RunShell("Generate filename tags", "~/.vim/shell/genfiletags.sh")<cr>
nmap <F12> :call RunShell("Generate cscope", "cscope -Rb")<cr>:cs add cscope.out<cr>
nmap <leader>sa :cs add cscope.out<cr>
nmap <leader>ss :cs find s <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sg :cs find g <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sc :cs find c <C-R>=expand("<cword>")<cr><cr>
nmap <leader>st :cs find t <C-R>=expand("<cword>")<cr><cr>
nmap <leader>se :cs find e <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>si :cs find i <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>sd :cs find d <C-R>=expand("<cword>")<cr><cr>
nmap <leader>zz <C-w>o

"golang vim-go command 
let g:go_fmt_autosave=0
nmap <leader>gb :GoBuild<CR>
nmap <leader>gr :GoRun<CR>
